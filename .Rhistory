##Calcular accesibilidad
#tiempo_zona= algo(df())
leaflet() |>
addTiles() |>
addMarkers(data=df() |> st_cast("POINT") |> as("Spatial"),
popup = ~paste0(
"Nombre: <b>", nombre, "</b><br>",
"Secretaría: <b>", scrtr_n, "</b><br>",
"Dependencia: <b>", dpndnc_n, "</b><br>",
"Nombre establecimiento: <b>", nmbr_st, "</b><br>",
"Horario del establecimiento: <b>", horr_st, "</b>"
),
label = ~paste0("Nombre: <b>", nombre, "</b><br>"))
# |> addRaster(tiempo_zona)
})
card <- function(title, ...) {
htmltools::tags$div(
class = "card",
htmltools::tags$div(class = "card-header", title),
htmltools::tags$div(class = "card-body", ...)
)
}
ui <- fluidPage(
theme = bslib::bs_theme(version = 5),
includeCSS(css_btn_area),
fluidRow(
column(width = 4, style = "height: 100vh; background-color: #f5f5f5; padding: 20px;", # Added padding here
h2("Cálculo de Accesibilidad"),
HTML(
"<p>
La accesibilidad se calcula como el costo de traslado a un lugar de destino predefinido. Para obtenerlo, se considera:
<ul>
<li><strong>Vialidades carreteras</strong> en el estado, así como sus velocidades promedio.</li>
<li>Tipo de <strong>uso de suelo</strong>.</li>
<li>Modelo digital de <strong>elevación</strong>.</li>
</ul>
Un modelo de movilidad sobre grafos determina el costo mínimo de traslado (en minutos) desde cada punto del estado hacia el más cercano de los lugares destino.
</p>"
),
card(
title = "Agrega las ubicaciones. Puedes seleccionar varios archivos o subir un archivo .rar",
full_screen = FALSE,
# Centering the content horizontally and vertically within the card's body
div(style = " display: flex; flex-direction: column; justify-content: center; align-items: center;",
fileInputArea(
inputId = "filemap",
label = "Arrastra o selecciona tus archivos .shp, .dbf, .shx, .prj, etc. aquí:",
buttonLabel = "Click para seleccionar archivos",
multiple = TRUE,
accept = c('.shp', ".dbf", ".shx", ".sbx", ".sbn", ".prg", ".rar")
),
shiny::tableOutput("files")
)
)
),
column(width = 8, style = "height: 100vh;",
leafletOutput("map", height = "100%")
)
)
)
# Función para manejar archivos temporales ----
rutina_crear_copias_temporales <- function(inputFiles) {
temp_dir <- tempfile()
dir.create(temp_dir)
if (!grepl(".rar", inputFiles$datapath[1])) {
for (i in seq_along(inputFiles$name)) {
file.copy(inputFiles$datapath[i], file.path(temp_dir, inputFiles$name[i]))
}
} else {
file.copy(inputFiles$datapath[1], file.path(temp_dir, inputFiles$name[1]))
archive_extract(file.path(temp_dir, inputFiles$name[1]), dir = temp_dir)
}
return(temp_dir)
}
# Servidor ----
server <- function(input, output, session) {
# Cargar shapefile
df <- reactive({
req(input$filemap)
temp_dir <- rutina_crear_copias_temporales(input$filemap)
read_sf(list.files(temp_dir, pattern = "\\.shp$", full.names = TRUE))
})
# Lista reactiva para almacenar filtros dinámicos
filters <- reactiveVal(list())
# Mostrar mapa
output$map <- renderLeaflet({
req(df())
if(is.na(st_crs(df()))){
df=st_set_crs(df(),value = st_crs("EPSG:4326"))
}
#Capturar el nombre del tramite
#Secretaria
#Dependencia
#Centro de Atención
#Horario
###Pendiente: Municipio de ubicación.
##Calcular accesibilidad
#tiempo_zona= algo(df())
leaflet() |>
addTiles() |>
addMarkers(data=df() |> st_cast("POINT") |> as("Spatial"),
popup = ~paste0(
"Nombre: <b>", nombre, "</b><br>",
"Secretaría: <b>", scrtr_n, "</b><br>",
"Dependencia: <b>", dpndnc_n, "</b><br>",
"Nombre establecimiento: <b>", nmbr_st, "</b><br>",
"Horario del establecimiento: <b>", horr_st, "</b>"
),
label = ~paste0("Nombre: <b>", nombre, "</b><br>"))
# |> addRaster(tiempo_zona)
})
}
shinyApp(ui, server)
##Calcular accesibilidad
#tiempo_zona= algo(df())
leaflet() |>
addTiles() |>
addMarkers(data=df() |> st_cast("POINT") |> as("Spatial"),
popup = ~paste0(
"Nombre: <b>", nombre, "</b><br>",
"Secretaría: <b>", scrtr_n, "</b><br>",
"Dependencia: <b>", dpndnc_n, "</b><br>",
"Nombre establecimiento: <b>", nmbr_st, "</b><br>",
"Horario del establecimiento: <b>", horr_st, "</b>"
),
label = ~nombre
# |> addRaster(tiempo_zona)
})
##Calcular accesibilidad
#tiempo_zona= algo(df())
leaflet() |>
addTiles() |>
addMarkers(data=df() |> st_cast("POINT") |> as("Spatial"),
popup = ~paste0(
"Nombre: <b>", nombre, "</b><br>",
"Secretaría: <b>", scrtr_n, "</b><br>",
"Dependencia: <b>", dpndnc_n, "</b><br>",
"Nombre establecimiento: <b>", nmbr_st, "</b><br>",
"Horario del establecimiento: <b>", horr_st, "</b>"
),
label = ~nombre))
ui <- fluidPage(
theme = bslib::bs_theme(version = 5),
includeCSS(css_btn_area),
fluidRow(
column(width = 4, style = "height: 100vh; background-color: #f5f5f5; padding: 20px;", # Added padding here
h2("Cálculo de Accesibilidad"),
HTML(
"<p>
La accesibilidad se calcula como el costo de traslado a un lugar de destino predefinido. Para obtenerlo, se considera:
<ul>
<li><strong>Vialidades carreteras</strong> en el estado, así como sus velocidades promedio.</li>
<li>Tipo de <strong>uso de suelo</strong>.</li>
<li>Modelo digital de <strong>elevación</strong>.</li>
</ul>
Un modelo de movilidad sobre grafos determina el costo mínimo de traslado (en minutos) desde cada punto del estado hacia el más cercano de los lugares destino.
</p>"
),
card(
title = "Agrega las ubicaciones. Puedes seleccionar varios archivos o subir un archivo .rar",
full_screen = FALSE,
# Centering the content horizontally and vertically within the card's body
div(style = " display: flex; flex-direction: column; justify-content: center; align-items: center;",
fileInputArea(
inputId = "filemap",
label = "Arrastra o selecciona tus archivos .shp, .dbf, .shx, .prj, etc. aquí:",
buttonLabel = "Click para seleccionar archivos",
multiple = TRUE,
accept = c('.shp', ".dbf", ".shx", ".sbx", ".sbn", ".prg", ".rar")
),
shiny::tableOutput("files")
)
)
),
column(width = 8, style = "height: 100vh;",
leafletOutput("map", height = "100%")
)
)
)
# Función para manejar archivos temporales ----
rutina_crear_copias_temporales <- function(inputFiles) {
temp_dir <- tempfile()
dir.create(temp_dir)
if (!grepl(".rar", inputFiles$datapath[1])) {
for (i in seq_along(inputFiles$name)) {
file.copy(inputFiles$datapath[i], file.path(temp_dir, inputFiles$name[i]))
}
} else {
file.copy(inputFiles$datapath[1], file.path(temp_dir, inputFiles$name[1]))
archive_extract(file.path(temp_dir, inputFiles$name[1]), dir = temp_dir)
}
return(temp_dir)
}
# Servidor ----
server <- function(input, output, session) {
# Cargar shapefile
df <- reactive({
req(input$filemap)
temp_dir <- rutina_crear_copias_temporales(input$filemap)
read_sf(list.files(temp_dir, pattern = "\\.shp$", full.names = TRUE))
})
# Lista reactiva para almacenar filtros dinámicos
filters <- reactiveVal(list())
# Mostrar mapa
output$map <- renderLeaflet({
req(df())
if(is.na(st_crs(df()))){
df=st_set_crs(df(),value = st_crs("EPSG:4326"))
}
#Capturar el nombre del tramite
#Secretaria
#Dependencia
#Centro de Atención
#Horario
###Pendiente: Municipio de ubicación.
##Calcular accesibilidad
#tiempo_zona= algo(df())
leaflet() |>
addTiles() |>
addMarkers(data=df() |> st_cast("POINT") |> as("Spatial"),
popup = ~paste0(
"Nombre: <b>", nombre, "</b><br>",
"Secretaría: <b>", scrtr_n, "</b><br>",
"Dependencia: <b>", dpndnc_n, "</b><br>",
"Nombre establecimiento: <b>", nmbr_st, "</b><br>",
"Horario del establecimiento: <b>", horr_st, "</b>"
),
label = ~nombre)
# |> addRaster(tiempo_zona)
})
}
shinyApp(ui, server)
##### Accesibilidad
uso_de_suelo=raster("Accesibilidad/uso_de_suelo_friccion.tif")
## Accesibilidad Previa
setwd("C:/Users/SIGEH/Desktop/Lalo/Gob/Extras/Tramites/")
uso_de_suelo=raster("Accesibilidad/uso_de_suelo_friccion.tif")
pendiente=raster("Accesibilidad/pendiente.tif")
carreteras=raster("Accesibilidad/carreteras.tif")
library(raster)
uso_de_suelo=raster("Accesibilidad/uso_de_suelo_friccion.tif")
pendiente=raster("Accesibilidad/pendiente.tif")
carreteras=raster("Accesibilidad/carreteras.tif")
extent(carreteras)==extent(pendiente) &
extent(uso_de_suelo)==extent(pendiente)
#Sí me voy a tomar la libertad de actualizar los valores del raster que estén cerca de 90 grados
pendiente[pendiente<95.9 & pendiente>=90]=95.9
pendiente[pendiente<=90 & pendiente>84.9]=84.9
####Accesibilidad a pie
slp_walk = 6 * exp(-0.4 * abs(tan(pendiente * pi / 180) + 0.05))  # Calcula la velocidad de caminata ajustada por la pendiente.
terrain_walk_spd = uso_de_suelo * slp_walk       #Le quité el /5.0. Quiero pensar que es la velocidad de caminata según uso de suelo. El promedio es de 5.5 km/h         # Calcula la velocidad sobre el terreno ajustada por la pendiente y el uso de suelo.
##Accesibilidad por carreteras
slp_car = 50 * exp(-0.4 * abs(tan(pendiente * pi / 180) + 0.12))  # Calcula la velocidad sobre carreteras ajustada por la pendiente.
sloped_road_spd = carreteras * slp_car / 50.0 # Calcula la velocidad ajustada por pendiente para carreteras y la convierte en un raster.
merged_spd = merge(sloped_road_spd, terrain_walk_spd)     # Combina los rasters de velocidad de carreteras y terreno.
friction = 1.0 / (merged_spd * 1000 / 60.0 )
library(gdistance)
Trans = transition(friction, function(x) 1 / mean(x), 8)  # Crea una matriz de transición basada en la fricción.
T.GC = geoCorrection(Trans, type="c")
hidalgo=st_read("Accesibilidad/hidalgo/LIM_MUNICIPALES.shp")
##Calcular accesibilidad
#tiempo_zona= algo(df())
leaflet() |>
addTiles() |>
addMarkers(data=df() |> st_cast("POINT") |> as("Spatial"),
popup = ~paste0(
"Nombre: <b>", nombre, "</b><br>",
"Secretaría: <b>", scrtr_n, "</b><br>",
"Dependencia: <b>", dpndnc_n, "</b><br>",
"Nombre establecimiento: <b>", nmbr_st, "</b><br>",
"Horario del establecimiento: <b>", horr_st, "</b>"
),
label = ~nombre) |>
addRasterImage(tiempo_zona) |>
# |> addRaster(tiempo_zona)
})
card <- function(title, ...) {
htmltools::tags$div(
class = "card",
htmltools::tags$div(class = "card-header", title),
htmltools::tags$div(class = "card-body", ...)
)
}
ui <- fluidPage(
theme = bslib::bs_theme(version = 5),
includeCSS(css_btn_area),
fluidRow(
column(width = 4, style = "height: 100vh; background-color: #f5f5f5; padding: 20px;", # Added padding here
h2("Cálculo de Accesibilidad"),
HTML(
"<p>
La accesibilidad se calcula como el costo de traslado a un lugar de destino predefinido. Para obtenerlo, se considera:
<ul>
<li><strong>Vialidades carreteras</strong> en el estado, así como sus velocidades promedio.</li>
<li>Tipo de <strong>uso de suelo</strong>.</li>
<li>Modelo digital de <strong>elevación</strong>.</li>
</ul>
Un modelo de movilidad sobre grafos determina el costo mínimo de traslado (en minutos) desde cada punto del estado hacia el más cercano de los lugares destino.
</p>"
),
card(
title = "Agrega las ubicaciones. Puedes seleccionar varios archivos o subir un archivo .rar",
full_screen = FALSE,
# Centering the content horizontally and vertically within the card's body
div(style = " display: flex; flex-direction: column; justify-content: center; align-items: center;",
fileInputArea(
inputId = "filemap",
label = "Arrastra o selecciona tus archivos .shp, .dbf, .shx, .prj, etc. aquí:",
buttonLabel = "Click para seleccionar archivos",
multiple = TRUE,
accept = c('.shp', ".dbf", ".shx", ".sbx", ".sbn", ".prg", ".rar")
),
shiny::tableOutput("files")
)
)
),
column(width = 8, style = "height: 100vh;",
leafletOutput("map", height = "100%")
)
)
)
# Función para manejar archivos temporales ----
rutina_crear_copias_temporales <- function(inputFiles) {
temp_dir <- tempfile()
dir.create(temp_dir)
if (!grepl(".rar", inputFiles$datapath[1])) {
for (i in seq_along(inputFiles$name)) {
file.copy(inputFiles$datapath[i], file.path(temp_dir, inputFiles$name[i]))
}
} else {
file.copy(inputFiles$datapath[1], file.path(temp_dir, inputFiles$name[1]))
archive_extract(file.path(temp_dir, inputFiles$name[1]), dir = temp_dir)
}
return(temp_dir)
}
# Servidor ----
server <- function(input, output, session) {
# Cargar shapefile
df <- reactive({
req(input$filemap)
temp_dir <- rutina_crear_copias_temporales(input$filemap)
read_sf(list.files(temp_dir, pattern = "\\.shp$", full.names = TRUE))
})
# Lista reactiva para almacenar filtros dinámicos
filters <- reactiveVal(list())
# Mostrar mapa
output$map <- renderLeaflet({
req(df())
if(is.na(st_crs(df()))){
df=st_set_crs(df(),value = st_crs("EPSG:4326"))
}
puntos = df()
coordenadas = st_coordinates(puntos)
tiempo_zona = accCost(T.GC, coordenadas)
###Pendiente: Municipio de ubicación.
##Calcular accesibilidad
#tiempo_zona= algo(df())
leaflet() |>
addTiles() |>
addMarkers(data=df() |> st_cast("POINT") |> as("Spatial"),
popup = ~paste0(
"Nombre: <b>", nombre, "</b><br>",
"Secretaría: <b>", scrtr_n, "</b><br>",
"Dependencia: <b>", dpndnc_n, "</b><br>",
"Nombre establecimiento: <b>", nmbr_st, "</b><br>",
"Horario del establecimiento: <b>", horr_st, "</b>"
),
label = ~nombre) |>
addRasterImage(tiempo_zona) |>
# |> addRaster(tiempo_zona)
})
##Calcular accesibilidad
#tiempo_zona= algo(df())
leaflet() |>
addTiles() |>
addMarkers(data=df() |> st_cast("POINT") |> as("Spatial"),
popup = ~paste0(
"Nombre: <b>", nombre, "</b><br>",
"Secretaría: <b>", scrtr_n, "</b><br>",
"Dependencia: <b>", dpndnc_n, "</b><br>",
"Nombre establecimiento: <b>", nmbr_st, "</b><br>",
"Horario del establecimiento: <b>", horr_st, "</b>"
),
label = ~nombre) |>
addRasterImage(data = tiempo_zona) |>
# |> addRaster(tiempo_zona)
})
card <- function(title, ...) {
htmltools::tags$div(
class = "card",
htmltools::tags$div(class = "card-header", title),
htmltools::tags$div(class = "card-body", ...)
)
}
ui <- fluidPage(
theme = bslib::bs_theme(version = 5),
includeCSS(css_btn_area),
fluidRow(
column(width = 4, style = "height: 100vh; background-color: #f5f5f5; padding: 20px;", # Added padding here
h2("Cálculo de Accesibilidad"),
HTML(
"<p>
La accesibilidad se calcula como el costo de traslado a un lugar de destino predefinido. Para obtenerlo, se considera:
<ul>
<li><strong>Vialidades carreteras</strong> en el estado, así como sus velocidades promedio.</li>
<li>Tipo de <strong>uso de suelo</strong>.</li>
<li>Modelo digital de <strong>elevación</strong>.</li>
</ul>
Un modelo de movilidad sobre grafos determina el costo mínimo de traslado (en minutos) desde cada punto del estado hacia el más cercano de los lugares destino.
</p>"
),
card(
title = "Agrega las ubicaciones. Puedes seleccionar varios archivos o subir un archivo .rar",
full_screen = FALSE,
# Centering the content horizontally and vertically within the card's body
div(style = " display: flex; flex-direction: column; justify-content: center; align-items: center;",
fileInputArea(
inputId = "filemap",
label = "Arrastra o selecciona tus archivos .shp, .dbf, .shx, .prj, etc. aquí:",
buttonLabel = "Click para seleccionar archivos",
multiple = TRUE,
accept = c('.shp', ".dbf", ".shx", ".sbx", ".sbn", ".prg", ".rar")
),
shiny::tableOutput("files")
)
)
),
column(width = 8, style = "height: 100vh;",
leafletOutput("map", height = "100%")
)
)
)
# Función para manejar archivos temporales ----
rutina_crear_copias_temporales <- function(inputFiles) {
temp_dir <- tempfile()
dir.create(temp_dir)
if (!grepl(".rar", inputFiles$datapath[1])) {
for (i in seq_along(inputFiles$name)) {
file.copy(inputFiles$datapath[i], file.path(temp_dir, inputFiles$name[i]))
}
} else {
file.copy(inputFiles$datapath[1], file.path(temp_dir, inputFiles$name[1]))
archive_extract(file.path(temp_dir, inputFiles$name[1]), dir = temp_dir)
}
return(temp_dir)
}
# Servidor ----
server <- function(input, output, session) {
# Cargar shapefile
df <- reactive({
req(input$filemap)
temp_dir <- rutina_crear_copias_temporales(input$filemap)
read_sf(list.files(temp_dir, pattern = "\\.shp$", full.names = TRUE))
})
# Lista reactiva para almacenar filtros dinámicos
filters <- reactiveVal(list())
# Mostrar mapa
output$map <- renderLeaflet({
req(df())
if(is.na(st_crs(df()))){
df=st_set_crs(df(),value = st_crs("EPSG:4326"))
}
puntos = df()
coordenadas = st_coordinates(puntos)
tiempo_zona = accCost(T.GC, coordenadas)
###Pendiente: Municipio de ubicación.
##Calcular accesibilidad
#tiempo_zona= algo(df())
leaflet() |>
addTiles() |>
addMarkers(data=df() |> st_cast("POINT") |> as("Spatial"),
popup = ~paste0(
"Nombre: <b>", nombre, "</b><br>",
"Secretaría: <b>", scrtr_n, "</b><br>",
"Dependencia: <b>", dpndnc_n, "</b><br>",
"Nombre establecimiento: <b>", nmbr_st, "</b><br>",
"Horario del establecimiento: <b>", horr_st, "</b>"
),
label = ~nombre) |>
addRasterImage(data = tiempo_zona)
# |> addRaster(tiempo_zona)
})
}
shinyApp(ui, server)
library(raster)
setwd("C:/Users/SIGEH/Desktop/Lalo/Gob/Extras/Tramites/")
uso_de_suelo=raster("Accesibilidad/uso_de_suelo_friccion.tif")
pendiente=raster("Accesibilidad/pendiente.tif")
carreteras=raster("Accesibilidad/carreteras.tif")
extent(carreteras)==extent(pendiente) &
extent(uso_de_suelo)==extent(pendiente)
#Sí me voy a tomar la libertad de actualizar los valores del raster que estén cerca de 90 grados
pendiente[pendiente<95.9 & pendiente>=90]=95.9
pendiente[pendiente<=90 & pendiente>84.9]=84.9
####Accesibilidad a pie
slp_walk = 6 * exp(-0.4 * abs(tan(pendiente * pi / 180) + 0.05))  # Calcula la velocidad de caminata ajustada por la pendiente.
terrain_walk_spd = uso_de_suelo * slp_walk       #Le quité el /5.0. Quiero pensar que es la velocidad de caminata según uso de suelo. El promedio es de 5.5 km/h         # Calcula la velocidad sobre el terreno ajustada por la pendiente y el uso de suelo.
##Accesibilidad por carreteras
slp_car = 50 * exp(-0.4 * abs(tan(pendiente * pi / 180) + 0.12))  # Calcula la velocidad sobre carreteras ajustada por la pendiente.
sloped_road_spd = carreteras * slp_car / 50.0 # Calcula la velocidad ajustada por pendiente para carreteras y la convierte en un raster.
merged_spd = merge(sloped_road_spd, terrain_walk_spd)     # Combina los rasters de velocidad de carreteras y terreno.
friction = 1.0 / (merged_spd * 1000 / 60.0 )
library(gdistance)
Trans = transition(friction, function(x) 1 / mean(x), 8)  # Crea una matriz de transición basada en la fricción.
T.GC = geoCorrection(Trans, type="c")
hidalgo=st_read("Accesibilidad/hidalgo/LIM_MUNICIPALES.shp")  #### HASTA AQUI CARGA
library(sf)
lugares_destino_ficticios = read_sf("punto/572.shp") |> st_cast("POINT") |> st_transform(st_crs(hidalgo))
lugares_destino_ficticios = read_sf("Tramites shp/1717_pago_de_creditos_fiscales_federales_coordinados.shp") |> st_cast("POINT") |> st_transform(st_crs(hidalgo))
tiempo_zona = accCost(T.GC, matrix(unlist(lugares_destino_ficticios$geometry),nrow = nrow(lugares_destino_ficticios),ncol = 2,byrow = T))  # Calcula el costo acumulado desde un punto de inicio (coordenadas especificadas) usando la matriz de transición corregida (T.GC).
plot(tiempo_zona)
plot(lugares_destino_ficticios,add=T)
